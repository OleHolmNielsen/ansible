# Setup rsnapshot Remote snapshot

- name: Install required packages from EPEL
  yum:
    name:
    - rsync
    - epel-release
    - rsnapshot
    - logrotate
    - bash-completion
    - git-all
    - vim-enhanced

- name: Remove the mlocate package because we may have too many files
  yum:
    name: mlocate
    state: absent

# The /usr/share/doc/rsnapshot* folder is different for el7 and el8 rpms
- name: Find rsnapshot files on remote machine
  shell: "rpm -ql rsnapshot | grep rsnapreport.pl"
  register: rsnapreport
  # Ignore the "changed" status
  changed_when: False
  args:
    warn: false

- name: Copy the rsnapreport.pl script from the rsnapshot RPM
  copy:
    src: "{{ rsnapreport.stdout }}"
    dest: "/usr/local/bin/"
    remote_src: yes
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

#- name: "Debug"
#  debug:
#    var: backups

- name: "Copy the master rsnapshot configuration files from this server"
  copy:
    src: "{{ item }}"
    dest: "/etc/"
    backup: yes
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items:
    - "rsnapshot-master.conf"
    - "rsnapshot-master-weekly.conf"
    - "rsnapshot-120months.conf"
    - "rsnapshot.exclude"

# Backup items "backups" are defined in the respective host_vars/<nodename> files
- name: "Create /etc/rsnapshot-xxx.conf files"
  blockinfile:
    path: "/etc/rsnapshot-{{ item.backupname }}.conf"
    state: present
    create: yes
    insertafter: BOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.backupname }}"
    block: |
      # Rsnapshot backup of server {{ item.backupname }}
      snapshot_root	{{ snapshot_root }}/{{ item.subdir|default }}{{ item.backupname }}
      include_conf	/etc/{{ item.include_conf|default('rsnapshot-master.conf') }}
  with_items:
    - "{{ backups }}"

- name: "Nested loop over backup servers and directories appending to /etc/rsnapshot-xxx.conf files"
  blockinfile:
    path: "/etc/rsnapshot-{{ item.0.backupname }}.conf"
    state: present
    insertafter: EOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.0.backupname }} {{ item.1 }}"
    block: |
      backup	{{ item.0.ssh_connection|default }}{{ item.1 }}/	./	+rsync_long_args=--stats
  loop: "{{ backups|subelements('dir') }}"

  # loop: "{{ backups|subelements('dir')|default(default_dirs) }}"
  # See https://docs.ansible.com/ansible/2.9/user_guide/playbooks_loops.html#with-subelements
  # The default_dirs is defined in vars/main.yml
  # Old method:
  #with_subelements:
  #  - "{{ backups }}"
  #  - dir

- name: "Create the rsnapshot top-level directories in {{ snapshot_root }}"
  file:
    path: "{{ snapshot_root }}/{{ item.subdir|default }}{{ item.backupname }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=
  with_items:
    - "{{ backups }}"

- name: Make a list of all backups
  set_fact:
    backuplist: "{{ backuplist|default }} {{ item.backupname }}"
  loop: "{{ backups }}"

- name: "Debug backuplist"
  debug:
    var: backuplist

- name: Copy the rsnapshots script from this server
  copy:
    src: rsnapshots
    dest: "/root/"
    # backup: yes
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

- name: Add backupnames to list in the rsnapshots script 
  lineinfile:
    path: /root/rsnapshots
    backrefs: yes
    regexp: '(^FILESYSTEMS=")(.*)"'
    line: 'FILESYSTEMS="{{ backuplist }}"'

    # Tried various other stuff:
    # insertbefore: '^EOF'
    # line: '{{ item.backupname }}'
    # backrefs: yes
    # backup: yes
    # regexp: '(^FILESYSTEMS=")(.*)(?!{{ item.backupname }})"'
    # regexp: '(^FILESYSTEMS=")(.*)"'
    # line: '\1\2 {{ item.backupname }}"'
  # when: 'item.backupname|string not in \2'
  # with_items:
  #   - "{{ backups }}"

- cron:
    name: "Make daily snapshots starting at {{ backup_start|default(23) }} hours"
    minute: "1"
    hour: "{{ backup_start|default(23) }}"
    job: "/root/rsnapshots"

- name: Create rsnapshot logrotate script
  copy:
    src: logrotate.rsnapshot
    dest: /etc/logrotate.d/rsnapshot
    owner: root
    group: root
    mode: 0644

